Recursion 
Q1)
class Solution {
    public int fib(int n) {
        if(n==1) return 1;
        if(n==0) return 0;
        else return fib(n-1) + fib(n-2);
    }
}
Q2)
class Solution {
    public void helper(int ind , int [] arr, int target ,List<List<Integer>>ans , List<Integer>ds){
        if(ind == arr.length){
            if(target== 0){
                ans.add(new ArrayList<>(ds));
            }
            return ;
        }
        if(arr[ind]<= target){
            ds.add(arr[ind]);
            helper(ind , arr, target - arr[ind], ans , ds);
            ds.remove(ds.size()-1);
        }
        helper(ind+1, arr, target, ans , ds);
    }
    public List<List<Integer>> combinationSum(int[] arr, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        helper(0 , arr, target , ans , new ArrayList<>());
        return ans;
        
    }
}

Q3)
class Solution {
    public int[] maximumBobPoints(int numArrows, int[] aliceArrows) {
        helper(numArrows, aliceArrows, 11, 0);
        return result;
    }
    int[] result = new int[12];
    int [] temp = new int[12];
    int max = 0;
    public void helper(int numArrows, int[] aliceArrows, int arrowIndex, int currentScore) {
        if(numArrows<0)
            return;

            if(currentScore>=max){
                max = currentScore;
                for(int i=0;i<result.length;i++){
                    result[i] = temp[i];
                }
            }

        if(numArrows==0)
            return;

        temp[arrowIndex] = (arrowIndex==0)?numArrows:(aliceArrows[arrowIndex]+1);
        
        helper(numArrows-temp[arrowIndex], aliceArrows, arrowIndex-1, currentScore + arrowIndex);
        
        temp[arrowIndex] = (arrowIndex==0)?numArrows:0;
        helper(numArrows-temp[arrowIndex], aliceArrows, arrowIndex-1, currentScore);
        temp[arrowIndex]  = 0;

    }
}

Array

Q1)
class Solution {
    public boolean checkIfExist(int[] arr) {
        Set<Integer> set = new HashSet<>();

        for (int i : arr) {
            if (set.contains(i * 2) || (i % 2 == 0 && set.contains(i / 2))) {
                return true;
            }

            set.add(i);
        }

        return false;
    }
}

Q2)
class Solution {
    int merge(int[] nums,int low,int mid, int high){
        int count=0;
        int j = mid+1;
        for(int i=low;i<=mid;i++){
            while(j<=high && nums[i]>(2*(long)nums[j])){
                j++;
            }count+=j-(mid+1);
        }
        ArrayList<Integer>arr=new ArrayList<>();
        int left=low,right=mid+1;
        while(left<=mid && right<=high){
            if(nums[left]<=nums[right]){
                arr.add(nums[left++]);
            }else{
                arr.add(nums[right++]);
            }
        }
        while(left<=mid){
                arr.add(nums[left++]);
            }
        while(right<=high){
                arr.add(nums[right++]);
            }
        for(int i=low;i<=high;i++){
            nums[i]=arr.get(i-low);
        }
        return count;
    }
    public int mergeSort(int []nums,int low,int high){
        if(low>=high){
            return 0;
        }
        int mid=(low+high)/2;
        int inv=mergeSort(nums,low,mid);
        inv+=mergeSort(nums,mid+1,high);
        inv+=merge(nums,low,mid,high);
        return inv;
    }
    public int reversePairs(int[]nums){
        return mergeSort(nums,0,nums.length-1);
    } 
}
Q3)
class Solution {
    private int dfs(int[][] grid, int x, int y, int zero){
        if(x>=grid.length || y >= grid[0].length || x<0 || y<0 || grid[x][y]==-1) return 0;
        if(grid[x][y]==2){
            return (zero==-1) ? 1 : 0;
        }
        grid[x][y]=-1;
        zero--;
        int totpath = dfs(grid, x+1, y, zero) + dfs(grid, x, y+1, zero) + dfs(grid, x-1, y, zero) + dfs(grid, x, y-1, zero);
        grid[x][y]=0;
        zero++;
        return totpath;

    }
    public int uniquePathsIII(int[][] grid) {
        int zero=0, sx=0, sy=0;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j]==0)zero++;
                if(grid[i][j]==1){
                    sx=i;
                    sy=j;
                }
            }
        }
        return dfs(grid, sx, sy, zero);
    }
}

Linkedlist

Q1)public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if(headA==null || headB==null)  return null;
    ListNode a = headA;
    ListNode b = headB;
    while(a!=b){
        a = a==null ? headB : a.next;
        b = b==null ? headA : b.next;
    }
    return a;
    }
}


Q2)
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<Integer>();
        Stack<Integer> s2 = new Stack<Integer>();
        
        while(l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        };
        while(l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        
        int sum = 0;
        ListNode list = new ListNode(0);
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) sum += s1.pop();
            if (!s2.empty()) sum += s2.pop();
            list.val = sum % 10;
            ListNode head = new ListNode(sum / 10);
            head.next = list;
            list = head;
            sum /= 10;
        }
        
        return list.val == 0 ? list.next : list;
    }
}

Q3)
class Solution {
    public ListNode insertionSortList(ListNode head) {
        ListNode dummy = new ListNode(0, head);
        
        ListNode prev = head;
        ListNode curr = head.next;
        
        while (curr != null) {
            if (curr.val >= prev.val) {
                prev = curr;
                curr = curr.next;
                continue;
            }
            
            ListNode tmp = dummy;
            while (curr.val > tmp.next.val) {
                tmp = tmp.next;
            }
            
            prev.next = curr.next;
            curr.next = tmp.next;
            tmp.next = curr;
            curr = prev.next;
        }
        return dummy.next;
    }
}       
